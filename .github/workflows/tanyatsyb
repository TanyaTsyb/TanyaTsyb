



library(httr)
library(rvest)
library(tibble)
library(dplyr)
library(purrr)
library(tibble)

phone_parse <- function(link){
  link <- paste('https://www.e-katalog.ru', link, sep = '')
  cnt <<-  cnt + 1
  phone_info <- content(GET(link))
  
  price <- phone_info %>% html_node(xpath='//div[@class="desc-big-price ib"]')
  
  # Если элемента с ценой нет на странице, проставляем в переменные нули
  if (length(price)==0){
    low_price = 0
    high_price = 0
    return(phone_table)
  } else {
    
    low_price <- price %>% html_element(xpath='span[@itemprop="lowPrice"]') %>%
      html_attr(name='content') # нижний предел цены
    
    high_price <- price %>% html_element(xpath='span[@itemprop="highPrice"]') %>%
      html_attr(name='content') # верхний предел
  }
  
  
  item_block <- phone_info %>% 
    html_node(xpath='//div[@class="item-block ff-roboto"]') # нужный мне элемент страницы
  
  phone_model <- item_block %>% 
    html_element(xpath='//div[@class="cont-block-title no-mobile"]') %>%
    html_text()
  
  chars <- item_block %>% 
    html_nodes(xpath="//div[@class='m-c-f2']//div[@class='m-s-f3']") # блок с характеристиками
  
  if (length(chars)==7){
    for (point in seq(1,length(chars))){
      screen <- substring(chars[1] %>% html_text(), first=7)
      memory <- substring(chars[2] %>% html_text(), first=8)
      processor <- substring(chars[3] %>% html_text(), first=11)
      camera <- substring(chars[4] %>% html_text(), first=8)
      video <- substring(chars[5] %>% html_text(), first=7)
      battery <- substring(chars[6] %>% html_text(), first=17)
    }
  } else if (length(chars)==6){
    for (point in seq(1,length(chars))){
      screen <- substring(chars[1] %>% html_text(), first=7)
      memory <- substring(chars[2] %>% html_text(), first=8)
      processor <- substring(chars[3] %>% html_text(), first=11)
      camera <- substring(chars[4] %>% html_text(), first=8)
      video <- 'NA'
      battery <- substring(chars[5] %>% html_text(), first=17)
    }
  } else if (length(chars)==5){
    for (point in seq(1,length(chars))){
      screen <- substring(chars[1] %>% html_text(), first=7)
      memory <- substring(chars[2] %>% html_text(), first=8)
      processor <- substring(chars[3] %>% html_text(), first=11)
      camera <- 'NA'
      video <- 'NA'
      battery <- substring(chars[4] %>% html_text(), first=17)
    }
  } else if (length(chars)==4){
    for (point in seq(1,length(chars))){
      screen <- substring(chars[1] %>% html_text(), first=7)
      memory <- substring(chars[2] %>% html_text(), first=8)
      processor <- 'NA'
      camera <- 'NA'
      video <- 'NA'
      battery <- substring(chars[3] %>% html_text(), first=17)}
  } else {
    return(phone_table)
  }
  
  
  features <- tibble('Модель'=phone_model, 'Цена(мин)'=low_price, 'Цена(макс)'=high_price,
                     'Экран'=screen, 'Память'=memory,'Процессор'=processor,
                     'Камера'=camera,'Видео'=video, 'Батарея'=battery)
  
  phone_table <<- rbind(phone_table, features)
  
  print(paste(cnt,phone_model))
  
  #print(phone_table)
  return(phone_table)
} # Функция парсинга страницы смартфона

# Парсит страницу со ссылками на смартфоны
page_parse <- function(url){
  url_got <- GET(url)
  
  page <- content(url_got)
  #элементы со ссылками начинаются на "gx"
  phone_links <- page %>% html_nodes(xpath='//div[contains(@id, "gx")]
                       //td[@class="model-short-info"]
                       //tr//td[@width="100%"]/a')%>% 
    html_attr(name='href')
  
  if (length(phone_links) == 0){
    print('next')
    return(phone_table)
  } 
  
  for (l in seq(1, length(phone_links))){
    phone_table <<- phone_parse(phone_links[l]) # присваиваем в глобальную переменную
  }
  return(phone_table)
}

cnt = 0
phone_table <- data.frame()

for (p in seq(0, 35)){ # Обработаем 30 страниц
  url_address <- paste('https://www.e-katalog.ru/list/122/', p,'/', sep='')
  print(paste('Page', p))
  phone_table <- page_parse(url_address)
}


write.csv(phone_table, 
          file = 'phone_table.csv')
